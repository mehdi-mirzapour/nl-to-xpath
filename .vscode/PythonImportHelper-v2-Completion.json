[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "process_instruction_with_html",
        "importPath": "llm_xpath",
        "description": "llm_xpath",
        "isExtraImport": true,
        "detail": "llm_xpath",
        "documentation": {}
    },
    {
        "label": "process_html_query",
        "importPath": "rag_html_mistral_pinecone",
        "description": "rag_html_mistral_pinecone",
        "isExtraImport": true,
        "detail": "rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ChatMistralAI",
        "importPath": "langchain_mistralai",
        "description": "langchain_mistralai",
        "isExtraImport": true,
        "detail": "langchain_mistralai",
        "documentation": {}
    },
    {
        "label": "ChatMistralAI",
        "importPath": "langchain_mistralai",
        "description": "langchain_mistralai",
        "isExtraImport": true,
        "detail": "langchain_mistralai",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "RunnableLambda",
        "importPath": "langchain_core.runnables",
        "description": "langchain_core.runnables",
        "isExtraImport": true,
        "detail": "langchain_core.runnables",
        "documentation": {}
    },
    {
        "label": "RunnableLambda",
        "importPath": "langchain_core.runnables",
        "description": "langchain_core.runnables",
        "isExtraImport": true,
        "detail": "langchain_core.runnables",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "VectorStoreIndex",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "MistralAIEmbedding",
        "importPath": "llama_index.embeddings.mistralai",
        "description": "llama_index.embeddings.mistralai",
        "isExtraImport": true,
        "detail": "llama_index.embeddings.mistralai",
        "documentation": {}
    },
    {
        "label": "PineconeVectorStore",
        "importPath": "llama_index.vector_stores.pinecone",
        "description": "llama_index.vector_stores.pinecone",
        "isExtraImport": true,
        "detail": "llama_index.vector_stores.pinecone",
        "documentation": {}
    },
    {
        "label": "Pinecone",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "ServerlessSpec",
        "importPath": "pinecone",
        "description": "pinecone",
        "isExtraImport": true,
        "detail": "pinecone",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "extract_url",
        "kind": 2,
        "importPath": "src.agentic-workflow",
        "description": "src.agentic-workflow",
        "peekOfCode": "def extract_url(text: str) -> Optional[str]:\n    \"\"\"\n    Extract the first URL found in the input text.\n    \"\"\"\n    pattern = r'https?://[^\\s\")]+'\n    match = re.search(pattern, text)\n    return match.group(0) if match else None\ndef main():\n    with INPUT_PATH.open(\"r\") as f:\n        data = json.load(f)",
        "detail": "src.agentic-workflow",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.agentic-workflow",
        "description": "src.agentic-workflow",
        "peekOfCode": "def main():\n    with INPUT_PATH.open(\"r\") as f:\n        data = json.load(f)\n    with sync_playwright() as p:\n        browser = p.chromium.launch(headless=False)\n        page = browser.new_page()\n        for item in data.get(\"instructions\", []):\n            classification = item.get(\"classification\")\n            instruction_text = item.get(\"original instruction\")\n            waiting_time = item.get(\"waiting_time\")",
        "detail": "src.agentic-workflow",
        "documentation": {}
    },
    {
        "label": "INPUT_PATH",
        "kind": 5,
        "importPath": "src.agentic-workflow",
        "description": "src.agentic-workflow",
        "peekOfCode": "INPUT_PATH = Path(\"resources/docs/classifier.json\")\ndef extract_url(text: str) -> Optional[str]:\n    \"\"\"\n    Extract the first URL found in the input text.\n    \"\"\"\n    pattern = r'https?://[^\\s\")]+'\n    match = re.search(pattern, text)\n    return match.group(0) if match else None\ndef main():\n    with INPUT_PATH.open(\"r\") as f:",
        "detail": "src.agentic-workflow",
        "documentation": {}
    },
    {
        "label": "extract_json_from_codeblock",
        "kind": 2,
        "importPath": "src.llm_classifier",
        "description": "src.llm_classifier",
        "peekOfCode": "def extract_json_from_codeblock(output: str) -> str:\n    \"\"\"Remove code block markdown from model output.\"\"\"\n    lines = output.strip().splitlines()\n    if lines[0].strip().startswith(\"```\"):\n        lines = lines[1:]\n    if lines and lines[-1].strip().startswith(\"```\"):\n        lines = lines[:-1]\n    return \"\\n\".join(lines)\ndef process_instruction_with_html(instructions: str) -> str:\n    \"\"\"Run the instruction + HTML through Mistral and return JSON result.\"\"\"",
        "detail": "src.llm_classifier",
        "documentation": {}
    },
    {
        "label": "process_instruction_with_html",
        "kind": 2,
        "importPath": "src.llm_classifier",
        "description": "src.llm_classifier",
        "peekOfCode": "def process_instruction_with_html(instructions: str) -> str:\n    \"\"\"Run the instruction + HTML through Mistral and return JSON result.\"\"\"\n    # Load environment variables\n    load_dotenv()\n    api_key = os.getenv(\"MISTRAL_API_KEY\")\n    if not api_key:\n        raise ValueError(\"MISTRAL_API_KEY not set in environment.\")\n    os.environ[\"MISTRAL_API_KEY\"] = api_key\n    # Prompt template\n    template = \"\"\"",
        "detail": "src.llm_classifier",
        "documentation": {}
    },
    {
        "label": "extract_json_from_codeblock",
        "kind": 2,
        "importPath": "src.llm_xpath",
        "description": "src.llm_xpath",
        "peekOfCode": "def extract_json_from_codeblock(output: str) -> str:\n    \"\"\"Remove code block markdown from model output.\"\"\"\n    lines = output.strip().splitlines()\n    if lines[0].strip().startswith(\"```\"):\n        lines = lines[1:]\n    if lines and lines[-1].strip().startswith(\"```\"):\n        lines = lines[:-1]\n    return \"\\n\".join(lines)\ndef process_instruction_with_html(instruction: str, html: str) -> str:\n    \"\"\"Run the instruction + HTML through Mistral and return JSON result.\"\"\"",
        "detail": "src.llm_xpath",
        "documentation": {}
    },
    {
        "label": "process_instruction_with_html",
        "kind": 2,
        "importPath": "src.llm_xpath",
        "description": "src.llm_xpath",
        "peekOfCode": "def process_instruction_with_html(instruction: str, html: str) -> str:\n    \"\"\"Run the instruction + HTML through Mistral and return JSON result.\"\"\"\n    # Load environment variables\n    load_dotenv()\n    api_key = os.getenv(\"MISTRAL_API_KEY\")\n    if not api_key:\n        raise ValueError(\"MISTRAL_API_KEY not set in environment.\")\n    os.environ[\"MISTRAL_API_KEY\"] = api_key\n    # Prompt template\n    template = \"\"\"",
        "detail": "src.llm_xpath",
        "documentation": {}
    },
    {
        "label": "initialize_pinecone",
        "kind": 2,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "def initialize_pinecone(index_name, dimension=1024, metric=\"cosine\", cloud=\"aws\", region=\"us-east-1\", namespace=\"default\"):\n    if not pinecone_api_key:\n        raise ValueError(\"Pinecone API key is not provided.\")\n    try:\n        pc = Pinecone(api_key=pinecone_api_key)\n    except Exception as e:\n        raise ConnectionError(f\"Failed to initialize Pinecone client: {e}\")\n    if index_name in pc.list_indexes().names():\n        index = pc.Index(index_name)\n        # Check index configuration",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "chunk_html",
        "kind": 2,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "def chunk_html(html_content, chunk_size):\n    chunks = []\n    for i in range(0, len(html_content), chunk_size):\n        chunk = html_content[i:i + chunk_size]\n        chunks.append(chunk)\n    return chunks\n# Find most similar chunk\ndef find_similar_chunk(html_content, query, chunk_size= max_token_limitation, index_name=\"default-index\"):\n    # Set Mistral AI embedding model (calls Mistral API)\n    Settings.embed_model = MistralAIEmbedding(",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "find_similar_chunk",
        "kind": 2,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "def find_similar_chunk(html_content, query, chunk_size= max_token_limitation, index_name=\"default-index\"):\n    # Set Mistral AI embedding model (calls Mistral API)\n    Settings.embed_model = MistralAIEmbedding(\n        model_name=\"mistral-embed\",\n        api_key=mistral_api_key\n    )\n    # Disable LLM since it's not needed for similarity search\n    Settings.llm = None\n    # Initialize Pinecone\n    pinecone_index = initialize_pinecone(index_name)",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "process_html_query",
        "kind": 2,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "def process_html_query(html_content, query, chunk_size=max_token_limitation, index_name=os.getenv(\"PINECONE_INDEX_NAME\")\n):\n    result = find_similar_chunk(html_content, query, chunk_size, index_name)\n    output = f\"\"\"Number of chunks created: {result['total_chunks']}\nSelected chunk index: {result['selected_chunk_index']}\nSimilarity score: {result['similarity_score']:.4f}\nSelected chunk content:\n{result['selected_chunk']}\"\"\"\n    return output\n# Example usage",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "mistral_api_key",
        "kind": 5,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "mistral_api_key = os.getenv(\"MISTRAL_API_KEY\")\npinecone_api_key = os.getenv(\"PINECONE_API_KEY\")\nmax_token_limitation = int(os.getenv(\"MAX_TOKEN_LIMITATION\", 12000))  # Default to 12000 if not set\n# Validate environment variables\nif not mistral_api_key:\n    raise ValueError(\"MISTRAL_API_KEY not set in environment.\")\nif not pinecone_api_key:\n    raise ValueError(\"PINECONE_API_KEY not set in environment.\")\ndef initialize_pinecone(index_name, dimension=1024, metric=\"cosine\", cloud=\"aws\", region=\"us-east-1\", namespace=\"default\"):\n    if not pinecone_api_key:",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "pinecone_api_key",
        "kind": 5,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "pinecone_api_key = os.getenv(\"PINECONE_API_KEY\")\nmax_token_limitation = int(os.getenv(\"MAX_TOKEN_LIMITATION\", 12000))  # Default to 12000 if not set\n# Validate environment variables\nif not mistral_api_key:\n    raise ValueError(\"MISTRAL_API_KEY not set in environment.\")\nif not pinecone_api_key:\n    raise ValueError(\"PINECONE_API_KEY not set in environment.\")\ndef initialize_pinecone(index_name, dimension=1024, metric=\"cosine\", cloud=\"aws\", region=\"us-east-1\", namespace=\"default\"):\n    if not pinecone_api_key:\n        raise ValueError(\"Pinecone API key is not provided.\")",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "max_token_limitation",
        "kind": 5,
        "importPath": "src.rag_html_mistral_pinecone",
        "description": "src.rag_html_mistral_pinecone",
        "peekOfCode": "max_token_limitation = int(os.getenv(\"MAX_TOKEN_LIMITATION\", 12000))  # Default to 12000 if not set\n# Validate environment variables\nif not mistral_api_key:\n    raise ValueError(\"MISTRAL_API_KEY not set in environment.\")\nif not pinecone_api_key:\n    raise ValueError(\"PINECONE_API_KEY not set in environment.\")\ndef initialize_pinecone(index_name, dimension=1024, metric=\"cosine\", cloud=\"aws\", region=\"us-east-1\", namespace=\"default\"):\n    if not pinecone_api_key:\n        raise ValueError(\"Pinecone API key is not provided.\")\n    try:",
        "detail": "src.rag_html_mistral_pinecone",
        "documentation": {}
    },
    {
        "label": "describe_element",
        "kind": 2,
        "importPath": "test.test_nl_to_xpath",
        "description": "test.test_nl_to_xpath",
        "peekOfCode": "def describe_element(elem):\n    tag = elem.tag\n    text = (elem.text or \"\").strip()\n    attrib = {k: v for k, v in elem.attrib.items()}\n    return f\"<{tag} {attrib}> text='{text}'\"\nfor entry in instructions:\n    nl = entry[\"nl\"]\n    xpath = entry[\"xpath\"]\n    elements = dom.xpath(xpath)\n    print(f\"Instruction: {nl}\")",
        "detail": "test.test_nl_to_xpath",
        "documentation": {}
    },
    {
        "label": "instructions",
        "kind": 5,
        "importPath": "test.test_nl_to_xpath",
        "description": "test.test_nl_to_xpath",
        "peekOfCode": "instructions = [\n    {\n        \"nl\": \"Click on 'about us'\",\n        \"xpath\": \"//a[normalize-space(text())='About Us']\"\n    },\n    {\n        \"nl\": \"Hover over 'ok' under 'Employee' section\",\n        \"xpath\": (\n            \"//section[@id='employee-section']\"\n            \"//div[contains(@class, 'employee')]\"",
        "detail": "test.test_nl_to_xpath",
        "documentation": {}
    },
    {
        "label": "html_file_path",
        "kind": 5,
        "importPath": "test.test_nl_to_xpath",
        "description": "test.test_nl_to_xpath",
        "peekOfCode": "html_file_path = \"resources/test_case_1.html\"\n# Read HTML from file\nwith open(html_file_path, 'r', encoding='utf-8') as f:\n    html_content = f.read()\n# Parse the HTML string into an lxml etree object\ndom = etree.HTML(html_content)\ndef describe_element(elem):\n    tag = elem.tag\n    text = (elem.text or \"\").strip()\n    attrib = {k: v for k, v in elem.attrib.items()}",
        "detail": "test.test_nl_to_xpath",
        "documentation": {}
    },
    {
        "label": "dom",
        "kind": 5,
        "importPath": "test.test_nl_to_xpath",
        "description": "test.test_nl_to_xpath",
        "peekOfCode": "dom = etree.HTML(html_content)\ndef describe_element(elem):\n    tag = elem.tag\n    text = (elem.text or \"\").strip()\n    attrib = {k: v for k, v in elem.attrib.items()}\n    return f\"<{tag} {attrib}> text='{text}'\"\nfor entry in instructions:\n    nl = entry[\"nl\"]\n    xpath = entry[\"xpath\"]\n    elements = dom.xpath(xpath)",
        "detail": "test.test_nl_to_xpath",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "test.test_xpath",
        "description": "test.test_xpath",
        "peekOfCode": "tree = html.fromstring(content)\n# Define XPath expressions to test\nxpaths = {\n    \"All links\": \"//a\",\n    \"About Us link by text\": \"//a[text()='About Us']\",\n    \"About Us link by href\": \"//a[@href='/about-us']\",\n    \"All buttons\": \"//button\",\n    \"Visible OK buttons\": \"//button[text()='OK' and not(contains(@style, 'display: none'))]\",\n    \"Hidden button\": \"//button[contains(@style, 'display: none')]\",\n    \"Country dropdown\": \"//select[@id='country-select']\",",
        "detail": "test.test_xpath",
        "documentation": {}
    },
    {
        "label": "xpaths",
        "kind": 5,
        "importPath": "test.test_xpath",
        "description": "test.test_xpath",
        "peekOfCode": "xpaths = {\n    \"All links\": \"//a\",\n    \"About Us link by text\": \"//a[text()='About Us']\",\n    \"About Us link by href\": \"//a[@href='/about-us']\",\n    \"All buttons\": \"//button\",\n    \"Visible OK buttons\": \"//button[text()='OK' and not(contains(@style, 'display: none'))]\",\n    \"Hidden button\": \"//button[contains(@style, 'display: none')]\",\n    \"Country dropdown\": \"//select[@id='country-select']\",\n    \"Employee section header\": \"//section[@id='employee-section']/h2\",\n    \"Option with value='canada'\": \"//option[@value='canada']\",",
        "detail": "test.test_xpath",
        "documentation": {}
    }
]